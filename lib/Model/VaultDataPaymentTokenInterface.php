<?php
/**
 * VaultDataPaymentTokenInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * VaultDataPaymentTokenInterface Class Doc Comment
 *
 * @category    Class
 * @description Gateway vault payment token interface.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VaultDataPaymentTokenInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'vault-data-payment-token-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'entity_id' => 'int',
        'customer_id' => 'int',
        'public_hash' => 'string',
        'payment_method_code' => 'string',
        'type' => 'string',
        'created_at' => 'string',
        'expires_at' => 'string',
        'gateway_token' => 'string',
        'token_details' => 'string',
        'is_active' => 'bool',
        'is_visible' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'entity_id' => 'entity_id',
        'customer_id' => 'customer_id',
        'public_hash' => 'public_hash',
        'payment_method_code' => 'payment_method_code',
        'type' => 'type',
        'created_at' => 'created_at',
        'expires_at' => 'expires_at',
        'gateway_token' => 'gateway_token',
        'token_details' => 'token_details',
        'is_active' => 'is_active',
        'is_visible' => 'is_visible'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'entity_id' => 'setEntityId',
        'customer_id' => 'setCustomerId',
        'public_hash' => 'setPublicHash',
        'payment_method_code' => 'setPaymentMethodCode',
        'type' => 'setType',
        'created_at' => 'setCreatedAt',
        'expires_at' => 'setExpiresAt',
        'gateway_token' => 'setGatewayToken',
        'token_details' => 'setTokenDetails',
        'is_active' => 'setIsActive',
        'is_visible' => 'setIsVisible'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'entity_id' => 'getEntityId',
        'customer_id' => 'getCustomerId',
        'public_hash' => 'getPublicHash',
        'payment_method_code' => 'getPaymentMethodCode',
        'type' => 'getType',
        'created_at' => 'getCreatedAt',
        'expires_at' => 'getExpiresAt',
        'gateway_token' => 'getGatewayToken',
        'token_details' => 'getTokenDetails',
        'is_active' => 'getIsActive',
        'is_visible' => 'getIsVisible'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entity_id'] = isset($data['entity_id']) ? $data['entity_id'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['public_hash'] = isset($data['public_hash']) ? $data['public_hash'] : null;
        $this->container['payment_method_code'] = isset($data['payment_method_code']) ? $data['payment_method_code'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['expires_at'] = isset($data['expires_at']) ? $data['expires_at'] : null;
        $this->container['gateway_token'] = isset($data['gateway_token']) ? $data['gateway_token'] : null;
        $this->container['token_details'] = isset($data['token_details']) ? $data['token_details'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['is_visible'] = isset($data['is_visible']) ? $data['is_visible'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['public_hash'] === null) {
            $invalid_properties[] = "'public_hash' can't be null";
        }
        if ($this->container['payment_method_code'] === null) {
            $invalid_properties[] = "'payment_method_code' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        if ($this->container['gateway_token'] === null) {
            $invalid_properties[] = "'gateway_token' can't be null";
        }
        if ($this->container['token_details'] === null) {
            $invalid_properties[] = "'token_details' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalid_properties[] = "'is_active' can't be null";
        }
        if ($this->container['is_visible'] === null) {
            $invalid_properties[] = "'is_visible' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['public_hash'] === null) {
            return false;
        }
        if ($this->container['payment_method_code'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['gateway_token'] === null) {
            return false;
        }
        if ($this->container['token_details'] === null) {
            return false;
        }
        if ($this->container['is_active'] === null) {
            return false;
        }
        if ($this->container['is_visible'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets entity_id
     * @return int
     */
    public function getEntityId()
    {
        return $this->container['entity_id'];
    }

    /**
     * Sets entity_id
     * @param int $entity_id Entity ID.
     * @return $this
     */
    public function setEntityId($entity_id)
    {
        $this->container['entity_id'] = $entity_id;

        return $this;
    }

    /**
     * Gets customer_id
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     * @param int $customer_id Customer ID.
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets public_hash
     * @return string
     */
    public function getPublicHash()
    {
        return $this->container['public_hash'];
    }

    /**
     * Sets public_hash
     * @param string $public_hash Public hash
     * @return $this
     */
    public function setPublicHash($public_hash)
    {
        $this->container['public_hash'] = $public_hash;

        return $this;
    }

    /**
     * Gets payment_method_code
     * @return string
     */
    public function getPaymentMethodCode()
    {
        return $this->container['payment_method_code'];
    }

    /**
     * Sets payment_method_code
     * @param string $payment_method_code Payment method code
     * @return $this
     */
    public function setPaymentMethodCode($payment_method_code)
    {
        $this->container['payment_method_code'] = $payment_method_code;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at Token creation timestamp
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets expires_at
     * @return string
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     * @param string $expires_at Token expiration timestamp
     * @return $this
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets gateway_token
     * @return string
     */
    public function getGatewayToken()
    {
        return $this->container['gateway_token'];
    }

    /**
     * Sets gateway_token
     * @param string $gateway_token Gateway token ID
     * @return $this
     */
    public function setGatewayToken($gateway_token)
    {
        $this->container['gateway_token'] = $gateway_token;

        return $this;
    }

    /**
     * Gets token_details
     * @return string
     */
    public function getTokenDetails()
    {
        return $this->container['token_details'];
    }

    /**
     * Sets token_details
     * @param string $token_details Token details
     * @return $this
     */
    public function setTokenDetails($token_details)
    {
        $this->container['token_details'] = $token_details;

        return $this;
    }

    /**
     * Gets is_active
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     * @param bool $is_active Is active.
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets is_visible
     * @return bool
     */
    public function getIsVisible()
    {
        return $this->container['is_visible'];
    }

    /**
     * Sets is_visible
     * @param bool $is_visible Is visible.
     * @return $this
     */
    public function setIsVisible($is_visible)
    {
        $this->container['is_visible'] = $is_visible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


